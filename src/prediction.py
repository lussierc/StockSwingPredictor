"""Creates a model and performs a stock price swing prediction using ML methods."""

import matplotlib.dates as mdates
import data_cleaner
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor


def run_predictor(scraped_data):
    """Given scraped data, run the prediction models used by the tool."""

    finalized_data = []

    for stock_data in scraped_data:
        print("* Making predictions for ", stock_data["stock"], " ....")
        historical_data = stock_data["stock_historical_data"]

        df = historical_data[
            ["Close"]
        ]  # get the close price from the historical data (independent variable)

        dates, prices = data_cleaner.clean_scraped_prediction_data(df)

        next_date = len(dates) + 1

        price_prediction, prev_close, svr_rbf_score = svr_predict(
            dates, prices, [next_date]
        )

        swing_prediction = predict_price_swing(price_prediction, prev_close)

        stock_data["prediction_results"] = store_prediction_results(
            stock_data, price_prediction, prev_close, swing_prediction, svr_rbf_score
        )

        finalized_data.append(stock_data)  # store prediction results

    return finalized_data


def svr_predict(dates, prices, next_date):
    """Performs SVR training and prediction of stock prices."""

    next_date = np.reshape(next_date, (len(next_date), 1))

    svr_lin, svr_poly, svr_rbf, lr, dtr = create_svr_models()  # creates and sets up SVR models
    svr_lin, svr_poly, svr_rbf, lr, dtr = train_svr_models(
        svr_lin, svr_poly, svr_rbf, lr, dtr, dates, prices
    )  # trains SVR models with previous price/date data

    svr_rbf_score = test_svr_models(dates, prices, svr_lin, svr_poly, svr_rbf)

    plot_predictions(dates, prices, svr_rbf, svr_lin, svr_poly, lr, dtr, next_date)

    return svr_rbf.predict(next_date)[0], prices[-1], svr_rbf_score


def create_svr_models():
    """Creates SVR models."""

    svr_lin = SVR(kernel="linear", C=1e3)
    svr_poly = SVR(kernel="poly", C=1e3, degree=2)
    svr_rbf = SVR(kernel="rbf", C=1e3, gamma=0.05)
    lr = LinearRegression()
    dtr = DecisionTreeRegressor()

    return svr_lin, svr_poly, svr_rbf, lr, dtr


def train_svr_models(svr_lin, svr_poly, svr_rbf, lr, dtr, dates, prices):
    """Trains/fits SVR models."""

    svr_lin.fit(dates, prices)  # Fit regression model
    svr_poly.fit(dates, prices)
    svr_rbf.fit(dates, prices)
    lr.fit(dates, prices)
    dtr.fit(dates, prices)


    return svr_lin, svr_poly, svr_rbf, lr, dtr


def test_svr_models(dates, prices, svr_lin, svr_poly, svr_rbf):
    """Test models and determine a confidence score rating of the predictions generated."""

    # Create a testing model: (the score returns the coefficient of determination R^2 of the prediction (best score is 1.0)):
    svr_lin_score = svr_lin.score(dates, prices)
    svr_poly_score = svr_poly.score(dates, prices)
    svr_rbf_score = svr_rbf.score(dates, prices)

    return svr_rbf_score


def plot_predictions(dates, prices, svr_rbf, svr_lin, svr_poly, lr, dtr, next_date):
    """Plot predictions generated by the tool."""

    # print labels for plot:
    plt.xlabel("Days")
    plt.ylabel("Price")
    plt.title("Support Vector Regression")

    plt.scatter(
        dates, prices, c="k", label="Data"
    )  # print original data points that the model will try to predict
    plt.plot(
        dates, svr_lin.predict(dates), c="g", label="Linear model"
    )  # predict given dates prices with a linear SVR model
    plt.plot(
        dates, svr_rbf.predict(dates), c="r", label="RBF model"
    )  # predict given dates prices with a rbf SVR model
    plt.plot(
        dates, svr_poly.predict(dates), c="b", label="Polynomial model"
    )  # predict given dates prices with a poly SVR model
    plt.plot(
        dates, lr.predict(dates), c="orange", label="LR"
    )  # predict given dates prices with a poly SVR model
    plt.plot(
        dates, dtr.predict(dates), c="purple", label="DTR"
    )  # predict given dates prices with a poly SVR model

    plt.scatter(
        next_date, svr_rbf.predict(next_date)[0], c="y", label="Next Day Prediction"
    )  # print the next day's prediction on the plot

    plt.legend()  # define plot legend
    plt.show()  # display the plot


def predict_price_swing(prediction, prev_close):
    """Performs the program's price swing prediction."""

    if prediction > prev_close:
        price_swing = "Up"
    elif prediction < prev_close:
        price_swing = "Down"
    elif prediction == prev_close:
        price_swing = "None"
    else:
        price_swing = "Error"

    return price_swing


def store_prediction_results(
    stock_data, price_prediction, prev_close, swing_prediction, svr_rbf_score
):
    """Store results from stock prediction."""

    prediction_results = {
        "swing_prediction": "",
        "price_prediction": 0,
        "prev_close": 0,
        "svr_rbf_score": 0,
    }

    prediction_results["swing_prediction"] = swing_prediction
    prediction_results["price_prediction"] = price_prediction
    prediction_results["prev_close"] = prev_close
    prediction_results["svr_rbf_score"] = svr_rbf_score

    return prediction_results
